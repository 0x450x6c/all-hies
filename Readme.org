* Cached Haskell IDE Engine Nix builds for all GHC versions

This repository provides cached Nix builds for the latest stable [[https://github.com/haskell/haskell-ide-engine][Haskell IDE Engine]] (HIE) for all supported GHC versions. It is intended to be a successor to [[https://github.com/domenkozar/hie-nix][hie-nix]], which only provides a changing subset of versions. This project solves the problem of having mismatched HIE and project GHC versions, which is almost impossible to avoid if you use a globally installed HIE and have many projects.

** Installation

*** Cached builds

If you wish to use prebuilt binaries, available on both Linux and macOS, configure the ~all-hies~ cache with [[https://all-hies.cachix.org/][these instructions]], or if you have cachix installed already:

#+BEGIN_SRC bash
cachix use all-hies
#+END_SRC

*** NixOS installation
Add this to the start of your ~configuration.nix~:
#+BEGIN_SRC nix
  let
    all-hies = import (fetchTarball "https://github.com/infinisil/all-hies/tarball/master") {};
  in
  {
    # ...
  }
#+END_SRC

Then depending on your needs, add the versions you need to ~environment.systemPackages~:

For the latest supported GHC version only (which is 8.6.4 right now):
#+BEGIN_SRC nix
  {
    environment.systemPackages = [ all-hies.latest ];
  }
#+END_SRC

For a specific version of GHC (warning: If you need multiple versions, use the approach after this one instead):
#+BEGIN_SRC nix
  {
    environment.systemPackages = [ all-hies.versions.ghc864 ];
  }
#+END_SRC

For a specific set of GHC versions (note: The ~hie~ / ~hie-wrapper~ binaries will both be a HIE wrapper that chooses the correct version out of the given ones):
#+BEGIN_SRC nix
   {
     environment.systemPackages = [
       (all-hies.selection { selector = p: { inherit (p) ghc864 ghc863 ghc843; }; })
     ];
   }
#+END_SRC

For *all* supported GHC versions (warning: requires ~30GB (or <10GB with compression) of space for all 9 versions):
#+BEGIN_SRC nix
  {
    environment.systemPackages = [
      (all-hies.selection { selector = p: p; })
    ];
  }
#+END_SRC

*** ~nix-env~ installation
For the latest supported GHC version only (which is 8.6.4 right now):
#+BEGIN_SRC bash
  nix-env -iA latest -f https://github.com/infinisil/all-hies/tarball/master
#+END_SRC

For a specific version of GHC (warning: If you need multiple versions, use the approach after this one instead):
#+BEGIN_SRC bash
  nix-env -iA versions.ghc864 -f https://github.com/infinisil/all-hies/tarball/master
#+END_SRC

For a specific set of GHC versions (note: The ~hie~ / ~hie-wrapper~ binaries will both be a HIE wrapper that chooses the correct version out of the given ones):
#+BEGIN_SRC bash
  nix-env -iA selection --arg selector 'p: { inherit (p) ghc864 ghc863 ghc843; }' -f https://github.com/infinisil/all-hies/tarball/master
#+END_SRC

For *all* supported GHC versions (warning: requires ~30GB (or <10GB with compression) of space for all 9 versions):
#+BEGIN_SRC bash
  nix-env -iA selection --arg selector 'p: p' -f https://github.com/infinisil/all-hies/tarball/master
#+END_SRC

** Updating this repository

This section is only for all-hies developers and not intended for end users.

If a new stable HIE version has been released, the following commands can be used to update the repository with it and build all versions
#+BEGIN_SRC bash
  nix-build update.nix
  result/bin/update
  nix-build -A versions -k
#+END_SRC

Or if you wish to use a different hie revision like master:

#+BEGIN_SRC bash
  result/bin/update master
#+END_SRC

This will take a long time, but these commands do a lot of intermediate caching and are idempotent, so they can be interrupted and resumed at any time. If builds fail for some reason, the ~overrides~ directory can be used to add GHC-specific Haskell overrides.

Depending on the amount of RAM you have, the above ~nix-build~ command can lead to a lot of thrashing, because Nix interleaves all dependencies from all different GHC versions, which means its working memory is about $number-of-versions * $size-of-ghc. To avoid this, build each version in a series of commands instead (or only k versions at a time). Because there's a lot of dependencies, you might also want to use `--max-jobs auto --cores 1`, in order to approximate maximal processor usage and minimize build time.

